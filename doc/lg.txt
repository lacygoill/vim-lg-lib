lg-lib.txt    lg-lib    Last change: January 19 2018
LG-LIB - TABLE OF CONTENTS                                   *lg-lib* *lg-lib-toc*
==============================================================================


< Interface >_________________________________________________________________~
                                        *lg#motion#repeatable#main#make()*
lg#motion#repeatable#main#make({what})

                Make the motions described in {what} repeatable.

                {what} is a dictionary containing 5 keys:

                        mode       the mode in which the motion is defined

                        buffer     a boolean flag; when on, the motion is local
                                   to the current buffer

                        axis       dictionary with 2 keys: 'bwd' and 'fwd'

                                   the values of this dictionary are the keys
                                   which must be pressed to repeat the motion
                                   in 2 directions

                                   the dictionary may contain an optional 3rd
                                   key: 'mode';
                                   by   default,  the   function  will   install
                                   the  mappings  to  repeat  the  motion  using
                                   `:noremap`, but if 'mode'  is given the value
                                   'n', they will  be installed with `:nnoremap`
                                   instead;
                                   this  is  useful  if  the keys  may  have  an
                                   undesired effect in some mode;
                                   for example, `co,` and `co;` could be used in
                                   normal mode, but they would introduce lag
                                   for the `c` operator in visual mode

                        from       the filepath and the line address from which
                                   the function is called

                                   you can get it programmatically with: >

                                       expand('<sfile>:p').':'.expand('<slnum>')
<
                                   you can  give any  value, including  an empty
                                   string; it will be  printed when asking for
                                   a verbose listing of the database

                        motions    a list of motions

                                   each item must be a dictionary containing
                                   2 keys:

                                       'bwd'     key to press to move backwards

                                       'fwd'     key to press to move forwards

                Usage example: >

                        call lg#motion#repeatable#main#make({
                        \        'mode':   '',
                        \        'buffer': 0,
                        \        'axis':   {'bwd': ',', 'fwd': ';'},
                        \        'from':   expand('<sfile>:p').':'.expand('<slnum>'),
                        \        'motions': [
                        \                     { 'bwd': '[M',  'fwd': ']M' },
                        \                     { 'bwd': '[m',  'fwd': ']m' },
                        \                   ],
                        \ })
<

                                        *repeatable-motion-listing*

:ListRepeatableMotions

        Display all repeatable motions.

        Accepts the following arguments to limit the output to some motions: >

            -axis
            -mode
            -scope
<

        `-axis` expects the name of an axis: >

            :ListRepeatableMotions -axis z,_z;
<
        Displays only motions repeatable with `z,` and `z;`.


        `-mode` expects the mode of the motions: >

            :ListRepeatableMotions -mode normal
<
        Displays only motions defined in normal mode.


        `-scope` expects the scope of the motions (`global` or `local`): >

            :ListRepeatableMotions -scope local
<
        Displays only motions local to the current buffer.


        You can also use the arguments `-v` and `-vv` to increase the verbosity
        of the output.
        `-v` will show from which file each original motion was installed.
        `-vv` will do the same, but will also show from which file the motion
        was made repeatable.


                                        *repeatable-motion-plug-mappings*

For every pair of keys that you use to repeat a motion,
`lg#motion#repeatable#main#make()` installs 2 `<plug>` mappings.
Example: >

    call lg#motion#repeatable#main#make({
    \        'mode':   '',
    \        'buffer': 0,
    \        'axis':   {'bwd': 'z,', 'fwd': 'z;'},
    \        'from':   expand('<sfile>:p').':'.expand('<slnum>'),
    \        'motions': [
    \                     { 'bwd': '[q',  'fwd': ']q' },
    \                   ],
    \ })
<
This will install the following mappings: >

    noremap  <expr>  <plug>(backward-z,_z;)  <sid>move_again('bwd', 'z, z;')
    noremap  <expr>  <plug>(forward-z,_z;)   <sid>move_again('fwd', 'z, z;')
<
They  can be  used as  a public  interface to  access the  script-local function
`s:move_again()`. The latter  is responsible  for repeating  a motion,  when you
`press z,` or `z;`.

Useful, for example, to create a submode in which you don't have to press `z`:
>
    call submode#enter_with('repeat-motion-2', 'n', 'r', 'z,', '<plug>(backward-z,_z;)')
    call submode#enter_with('repeat-motion-2', 'n', 'r', 'z;', '<plug>(forward-z,_z;)')
    call submode#map(       'repeat-motion-2', 'n', 'r',  ',', '<plug>(backward-z,_z;)')
    call submode#map(       'repeat-motion-2', 'n', 'r',  ';', '<plug>(forward-z,_z;)')
<

< Terminology >_______________________________________________________________~

                                        *repeatable-motion-terminology*

 axis

         Pair of keys which must be pressed to repeat a motion.


 database

         Dictionary `s:repeatable_motions` for global motions,
         or `b:repeatable_motions` for local motions.

         Contains the information relative to all repeatable motions.


 motion

         dictionary containing 2 keys:

             • bwd:     output of `maparg('<left>')` where <left> is
                        the backward motion

             • fwd:     same thing for `<right>` as the forward motion


< Errors >____________________________________________________________________~


                                        *E8000*

The dictionary argument you passed to `lg#motion#repeatable#main#make()` should
contain the following keys:

    • 'axis'
    • 'buffer'
    • 'from'
    • 'mode'
    • 'motions'

At least one of them is missing.


                                        *E8001*

The axis that you provided should have the keys 'bwd' and 'fwd'.
At least one of them is missing.


                                        *E8002*

You asked  for a local motion  to be made  repeatable: both its {lhs}  should be
used in local mappings. But here, at least one of them is not.


                                        *E8003*

Either the motion you're trying to make repeatable (M), is already repeatable:

                               “total collision”

Or, a motion in a database of repeatable motions (global or local) has:

    • the same mode as (M)
    • the same scope as (M)
    • one of its {lhs} is identical to one of (M)

                              “partial collision”


< Miscellaneous >_________________________________________________________________~
                                        *repeatable-motion-absolute-direction*

The key used to repeat a motion always moves the cursor in the same direction.
Example: >

    call lg#motion#repeatable#main#make({
    \        'mode':   '',
    \        'buffer': 0,
    \        'axis':   {'bwd': ',', 'fwd': ';'},
    \        'from':   expand('<sfile>:p').':'.expand('<slnum>'),
    \        'motions': [
    \                     { 'bwd': '[m',  'fwd': ']m' },
    \                   ],
    \ })
<
After pressing `[m`, `;` will still move the cursor to the NEXT start of a method.
In contrast, by default, after `Fx`, `;` will move the cursor the PREVIOUS `x`.


                                        *repeatable-motion-global-local*

You can ask to make a global motion repeatable or a local one (2 possibilities).
Besides, there can be (3 possibilities):

    • a global motion    using the same 2 {lhs}

    • a local motion     "

    • a local motion     using one, and only one, identical {lhs}

          its left  {lhs} is used  in a  local mapping, and  the right one  in a
          global mapping, or the reverse

That makes 6 possible combinations. Here's what happens for each of them.
When you ask for:

    • a local motion, and it exists

              the motion is made repeatable

    • a global motion, and there's no shadowing local motion

              the motion is made repeatable

    • a global motion, and there's a shadowing local motion

            the motion is made repeatable
            the function will temporarily unshadow the global motion,
            so that |maparg()| can return the information about the latter

    • a local motion, but it doesn't exist, or only partially

            the function will bail out and raise |E8000| because
            it checks that both {lhs} are used in local mappings

    • a global motion, but one of its {lhs} is shadowed
      by a local motion

            the plugin will make the 2 global {lhs}
            repeatable (unshadowing one of them)
